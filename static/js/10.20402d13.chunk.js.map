{"version":3,"sources":["../../src/assertEnvironment.ts","../../src/staticRendering.ts","../../src/utils.ts","../../src/printDebugValue.ts","../../src/reactionCleanupTracking.ts","../../src/useObserver.ts","../../src/observer.ts","../../src/ObserverComponent.ts"],"names":["Error","globalIsUsingStaticRendering","isUsingStaticRendering","useForceUpdate","setTick","useState","useCallback","tick","printDebugValue","v","getDependencyTree","CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS","uncommittedReactionRefs","ensureCleanupTimerRunning","reactionCleanupHandle","setTimeout","cleanUncommittedReactions","now","Date","ref","tracking","EMPTY_OBJECT","observerComponentNameFor","baseComponentName","useObserver","fn","options","forceUpdate","reactionTrackingRef","React","newReaction","trackingData","reaction","cleanAt","createTrackingData","scheduleCleanupOfReactionIfLeaked","current","reactionRef","recordReactionAsCommitted","Infinity","rendering","e","exception","observer","baseComponent","base","realOptions","forwardRef","wrappedComponent","props","memoComponent","memo","copyStaticProperties","Object","key","hoistBlackList","$$typeof","render","compare","type","ObserverComponent","children","component","ObserverPropsCheck","extraKey","hasProp","hasExtraProp"],"mappings":"wPAGA,eACI,MAAM,IAAIA,MAAV,qDAEJ,QACI,MAAM,IAAIA,MAAV,oECPJ,IAAIC,GAAJ,EAMA,SAAgBC,IACZ,S,wNCCYC,I,IACHC,EAAWC,mBAAS,GAApBD,GAMT,OAJeE,uBAAY,WACvBF,GAAQ,SAAAG,GAAI,OAAIA,EAAJ,OADhB,I,SCTYC,EAAgBC,GAC5B,OAAOC,YAAP,GCmCG,IAeP,EAfaC,EAAN,IAUDC,EAAiF,IAAvF,IAOA,SAASC,SACL,IAAIC,IACAA,EAAwBC,WAAWC,EAdpC,MAmCP,SAASA,IACLF,SAKA,IAAMG,EAAMC,KAAZ,MACAN,WAAgC,SAAAO,GAC5B,IAAMC,EAAWD,EAAjB,QACA,GACQF,GAAOG,EAAX,UAEIA,qBACAD,eACAP,gBAKRA,OAAJ,GAGIC,IChFR,IAAMQ,EAAN,GAEA,SAASC,EAAyBC,GAC9B,mBAKJ,SAAgBC,EACZC,EACAF,EACAG,GAEA,QAHAH,UAA4B,iBAC5BG,UAA+BL,GAE3BnB,IACA,OAAOuB,IAUX,IDkBAN,ECjBMQ,GADwBD,kBAA9B,KAMME,EAAsBC,WAA5B,MAEA,IAAKD,EAAL,QAAkC,CAI9B,IAAME,EAAc,IAAI,EAAJ,EAAaR,EAAb,IAA0D,WAMtES,EAAJ,QAEIJ,KAKAG,YACAF,mBAIFG,E,SDlDqBC,GAK/B,MAJwC,CACpCC,QAASf,WAD2B,EAEpCc,YC+CqBE,CAArB,GACAN,YDbJT,ECcIgB,EDZJvB,SAEAC,I,ICoDA,EACA,EAxCQmB,EAAaJ,EAAoBQ,QAAjCJ,SAgDR,GA/CAH,uBAEAA,eAAgB,WDbpB,IACIQ,ECuCI,ODvCJA,ECcIC,EDZJ1B,YCcQgB,EAAJ,QAIIA,sBASAA,UAA8B,CAC1BI,SAAU,IAAI,EAAJ,EAAaV,EAAb,IAA0D,WAEhEK,OAEJM,QAASM,KAEbZ,KAGG,WACHC,6BACAA,kBA7BRC,IAsCAG,SAAe,WACX,IACIQ,EAAYf,IACd,MAAOgB,GACLC,QAGR,EACI,MADW,EAGf,S,SC3FYC,EACZC,EACAlB,GAGA,GAAIxB,IACA,SAGJ,IAeA,EAyB0B2C,EAA9B,EAxCUC,EAAc,EAAH,CACbC,YAAY,GADhB,GAKMxB,EAAoBqB,eAA6BA,EAAvD,KAEMI,EAAmB,SAACC,EAAD,GACrB,OAAOzB,GAAY,kBAAMoB,EAAcK,EAApB,KAAnB,IAqBJ,OAnBAD,gBAWIE,EALAJ,EAAJ,WAKoBK,eAAKJ,qBAArBG,IAEgBC,eAAhBD,GAiBsBL,EAdLD,EAczB,EAdIQ,EAeAC,wBAA0B,SAAAC,GACjBC,EAAL,IACIF,0BAAmCA,kCAAnCA,OAhBRH,gBAEA,EAIJ,IAAMK,EAAsB,CACxBC,UADwB,EAExBC,QAFwB,EAGxBC,SAHwB,EAIxBC,MAAM,GC9EV,SAASC,EAAkB,G,IAAEC,aAAUJ,WAC7BK,EAAYD,GAAlB,EACA,0BAAWC,EACP,KAEGtC,EAAP,GAUJ,SAASuC,EAAmB,EAA5B,SAOI,IAAMC,EAAWV,wBAAjB,WACMW,EAAN,oBAAuBhB,EAAP,GACViB,EAAN,oBAA4BjB,EAAP,GACrB,OAAIgB,GAAJ,EACW,IAAIjE,MACP,qEADJ,GAKAiE,GAAJ,EACI,KAEG,IAAIjE,MACP,wCAGWiD,EAHX,uBADJ,2BA3BJW,YAA8B,CAC1BC,SAD0B,EAE1BJ,OAAQM,GAEZH,2B","file":"static/js/10.20402d13.chunk.js","sourcesContent":["import { spy } from \"mobx\"\nimport { useState } from \"react\"\n\nif (!useState) {\n    throw new Error(\"mobx-react-lite requires React with Hooks support\")\n}\nif (!spy) {\n    throw new Error(\"mobx-react-lite requires mobx at least version 4 to be available\")\n}\n","let globalIsUsingStaticRendering = false\n\nexport function useStaticRendering(enable: boolean) {\n    globalIsUsingStaticRendering = enable\n}\n\nexport function isUsingStaticRendering(): boolean {\n    return globalIsUsingStaticRendering\n}\n","import { useCallback, useEffect, useState } from \"react\"\n\nconst EMPTY_ARRAY: any[] = []\n\nexport function useUnmount(fn: () => void) {\n    useEffect(() => fn, EMPTY_ARRAY)\n}\n\nexport function useForceUpdate() {\n    const [, setTick] = useState(0)\n\n    const update = useCallback(() => {\n        setTick(tick => tick + 1)\n    }, [])\n\n    return update\n}\n\nexport function isPlainObject(value: any): value is object {\n    if (!value || typeof value !== \"object\") {\n        return false\n    }\n    const proto = Object.getPrototypeOf(value)\n    return !proto || proto === Object.prototype\n}\n\nexport function getSymbol(name: string): symbol | string {\n    if (typeof Symbol === \"function\") {\n        return Symbol.for(name)\n    }\n    return `__$mobx-react ${name}__`\n}\n\ndeclare const window: any\ndeclare const self: any\n\nconst mockGlobal = {}\n\nexport function getGlobal() {\n    if (typeof window !== \"undefined\") {\n        return window\n    }\n    if (typeof global !== \"undefined\") {\n        return global\n    }\n    if (typeof self !== \"undefined\") {\n        return self\n    }\n    return mockGlobal\n}\n","import { getDependencyTree, Reaction } from \"mobx\"\n\nexport function printDebugValue(v: Reaction) {\n    return getDependencyTree(v)\n}\n","import { Reaction } from \"mobx\"\n\nexport interface IReactionTracking {\n    /** The Reaction created during first render, which may be leaked */\n    reaction: Reaction\n    /**\n     * The time (in ticks) at which point we should dispose of the reaction\n     * if this component hasn't yet been fully mounted.\n     */\n    cleanAt: number\n\n    /**\n     * Whether the component has yet completed mounting (for us, whether\n     * its useEffect has run)\n     */\n    mounted?: boolean\n\n    /**\n     * Whether the observables that the component is tracking changed between\n     * the first render and the first useEffect.\n     */\n    changedBeforeMount?: boolean\n}\n\nexport function createTrackingData(reaction: Reaction) {\n    const trackingData: IReactionTracking = {\n        cleanAt: Date.now() + CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS,\n        reaction\n    }\n    return trackingData\n}\n\n/**\n * The minimum time before we'll clean up a Reaction created in a render\n * for a component that hasn't managed to run its effects. This needs to\n * be big enough to ensure that a component won't turn up and have its\n * effects run without being re-rendered.\n */\nexport const CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS = 10_000\n\n/**\n * The frequency with which we'll check for leaked reactions.\n */\nexport const CLEANUP_TIMER_LOOP_MILLIS = 10_000\n\n/**\n * Reactions created by components that have yet to be fully mounted.\n */\nconst uncommittedReactionRefs: Set<React.MutableRefObject<IReactionTracking | null>> = new Set()\n\n/**\n * Latest 'uncommitted reactions' cleanup timer handle.\n */\nlet reactionCleanupHandle: ReturnType<typeof setTimeout> | undefined\n\nfunction ensureCleanupTimerRunning() {\n    if (reactionCleanupHandle === undefined) {\n        reactionCleanupHandle = setTimeout(cleanUncommittedReactions, CLEANUP_TIMER_LOOP_MILLIS)\n    }\n}\n\nexport function scheduleCleanupOfReactionIfLeaked(\n    ref: React.MutableRefObject<IReactionTracking | null>\n) {\n    uncommittedReactionRefs.add(ref)\n\n    ensureCleanupTimerRunning()\n}\n\nexport function recordReactionAsCommitted(\n    reactionRef: React.MutableRefObject<IReactionTracking | null>\n) {\n    uncommittedReactionRefs.delete(reactionRef)\n}\n\n/**\n * Run by the cleanup timer to dispose any outstanding reactions\n */\nfunction cleanUncommittedReactions() {\n    reactionCleanupHandle = undefined\n\n    // Loop through all the candidate leaked reactions; those older\n    // than CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS get tidied.\n\n    const now = Date.now()\n    uncommittedReactionRefs.forEach(ref => {\n        const tracking = ref.current\n        if (tracking) {\n            if (now >= tracking.cleanAt) {\n                // It's time to tidy up this leaked reaction.\n                tracking.reaction.dispose()\n                ref.current = null\n                uncommittedReactionRefs.delete(ref)\n            }\n        }\n    })\n\n    if (uncommittedReactionRefs.size > 0) {\n        // We've just finished a round of cleanups but there are still\n        // some leak candidates outstanding.\n        ensureCleanupTimerRunning()\n    }\n}\n\n/* istanbul ignore next */\n/**\n * Only to be used by test functions; do not export outside of mobx-react-lite\n */\nexport function forceCleanupTimerToRunNowForTests() {\n    // This allows us to control the execution of the cleanup timer\n    // to force it to run at awkward times in unit tests.\n    if (reactionCleanupHandle) {\n        clearTimeout(reactionCleanupHandle)\n        cleanUncommittedReactions()\n    }\n}\n\n/* istanbul ignore next */\nexport function resetCleanupScheduleForTests() {\n    if (reactionCleanupHandle) {\n        clearTimeout(reactionCleanupHandle)\n        reactionCleanupHandle = undefined\n    }\n    uncommittedReactionRefs.clear()\n}\n","import { Reaction } from \"mobx\"\nimport React from \"react\"\n\nimport { isObserverBatched } from \"./observerBatching\"\nimport { printDebugValue } from \"./printDebugValue\"\nimport {\n    createTrackingData,\n    IReactionTracking,\n    recordReactionAsCommitted,\n    scheduleCleanupOfReactionIfLeaked\n} from \"./reactionCleanupTracking\"\nimport { isUsingStaticRendering } from \"./staticRendering\"\nimport { useForceUpdate } from \"./utils\"\n\nexport type ForceUpdateHook = () => () => void\n\nexport interface IUseObserverOptions {\n    useForceUpdate?: ForceUpdateHook\n}\n\nconst EMPTY_OBJECT = {}\n\nfunction observerComponentNameFor(baseComponentName: string) {\n    return `observer${baseComponentName}`\n}\n\nlet warnedAboutBatching = false\n\nexport function useObserver<T>(\n    fn: () => T,\n    baseComponentName: string = \"observed\",\n    options: IUseObserverOptions = EMPTY_OBJECT\n): T {\n    if (isUsingStaticRendering()) {\n        return fn()\n    }\n\n    if (__DEV__ && !warnedAboutBatching && !isObserverBatched()) {\n        console.warn(\n            `[MobX] You haven't configured observer batching which might result in unexpected behavior in some cases. See more at https://github.com/mobxjs/mobx-react-lite/#observer-batching`\n        )\n        warnedAboutBatching = true\n    }\n\n    const wantedForceUpdateHook = options.useForceUpdate || useForceUpdate\n    const forceUpdate = wantedForceUpdateHook()\n\n    // StrictMode/ConcurrentMode/Suspense may mean that our component is\n    // rendered and abandoned multiple times, so we need to track leaked\n    // Reactions.\n    const reactionTrackingRef = React.useRef<IReactionTracking | null>(null)\n\n    if (!reactionTrackingRef.current) {\n        // First render for this component (or first time since a previous\n        // reaction from an abandoned render was disposed).\n\n        const newReaction = new Reaction(observerComponentNameFor(baseComponentName), () => {\n            // Observable has changed, meaning we want to re-render\n            // BUT if we're a component that hasn't yet got to the useEffect()\n            // stage, we might be a component that _started_ to render, but\n            // got dropped, and we don't want to make state changes then.\n            // (It triggers warnings in StrictMode, for a start.)\n            if (trackingData.mounted) {\n                // We have reached useEffect(), so we're mounted, and can trigger an update\n                forceUpdate()\n            } else {\n                // We haven't yet reached useEffect(), so we'll need to trigger a re-render\n                // when (and if) useEffect() arrives.  The easiest way to do that is just to\n                // drop our current reaction and allow useEffect() to recreate it.\n                newReaction.dispose()\n                reactionTrackingRef.current = null\n            }\n        })\n\n        const trackingData = createTrackingData(newReaction)\n        reactionTrackingRef.current = trackingData\n        scheduleCleanupOfReactionIfLeaked(reactionTrackingRef)\n    }\n\n    const { reaction } = reactionTrackingRef.current!\n    React.useDebugValue(reaction, printDebugValue)\n\n    React.useEffect(() => {\n        // Called on first mount only\n        recordReactionAsCommitted(reactionTrackingRef)\n\n        if (reactionTrackingRef.current) {\n            // Great. We've already got our reaction from our render;\n            // all we need to do is to record that it's now mounted,\n            // to allow future observable changes to trigger re-renders\n            reactionTrackingRef.current.mounted = true\n        } else {\n            // The reaction we set up in our render has been disposed.\n            // This is either due to bad timings of renderings, e.g. our\n            // component was paused for a _very_ long time, and our\n            // reaction got cleaned up, or we got a observable change\n            // between render and useEffect\n\n            // Re-create the reaction\n            reactionTrackingRef.current = {\n                reaction: new Reaction(observerComponentNameFor(baseComponentName), () => {\n                    // We've definitely already been mounted at this point\n                    forceUpdate()\n                }),\n                cleanAt: Infinity\n            }\n            forceUpdate()\n        }\n\n        return () => {\n            reactionTrackingRef.current!.reaction.dispose()\n            reactionTrackingRef.current = null\n        }\n    }, [])\n\n    // render the original component, but have the\n    // reaction track the observables, so that rendering\n    // can be invalidated (see above) once a dependency changes\n    let rendering!: T\n    let exception\n    reaction.track(() => {\n        try {\n            rendering = fn()\n        } catch (e) {\n            exception = e\n        }\n    })\n    if (exception) {\n        throw exception // re-throw any exceptions catched during rendering\n    }\n    return rendering\n}\n","import { forwardRef, memo } from \"react\"\n\nimport { isUsingStaticRendering } from \"./staticRendering\"\nimport { useObserver } from \"./useObserver\"\n\nexport interface IObserverOptions {\n    readonly forwardRef?: boolean\n}\n\nexport function observer<P extends object, TRef = {}>(\n    baseComponent: React.RefForwardingComponent<TRef, P>,\n    options: IObserverOptions & { forwardRef: true }\n): React.MemoExoticComponent<\n    React.ForwardRefExoticComponent<React.PropsWithoutRef<P> & React.RefAttributes<TRef>>\n>\n\nexport function observer<P extends object>(\n    baseComponent: React.FunctionComponent<P>,\n    options?: IObserverOptions\n): React.FunctionComponent<P>\n\nexport function observer<\n    C extends React.FunctionComponent<any> | React.RefForwardingComponent<any>,\n    Options extends IObserverOptions\n>(\n    baseComponent: C,\n    options?: Options\n): Options extends { forwardRef: true }\n    ? C extends React.RefForwardingComponent<infer TRef, infer P>\n        ? C &\n              React.MemoExoticComponent<\n                  React.ForwardRefExoticComponent<\n                      React.PropsWithoutRef<P> & React.RefAttributes<TRef>\n                  >\n              >\n        : never /* forwardRef set for a non forwarding component */\n    : C & { displayName: string }\n\n// n.b. base case is not used for actual typings or exported in the typing files\nexport function observer<P extends object, TRef = {}>(\n    baseComponent: React.RefForwardingComponent<TRef, P>,\n    options?: IObserverOptions\n) {\n    // The working of observer is explained step by step in this talk: https://www.youtube.com/watch?v=cPF4iBedoF0&feature=youtu.be&t=1307\n    if (isUsingStaticRendering()) {\n        return baseComponent\n    }\n\n    const realOptions = {\n        forwardRef: false,\n        ...options\n    }\n\n    const baseComponentName = baseComponent.displayName || baseComponent.name\n\n    const wrappedComponent = (props: P, ref: React.Ref<TRef>) => {\n        return useObserver(() => baseComponent(props, ref), baseComponentName)\n    }\n    wrappedComponent.displayName = baseComponentName\n\n    // memo; we are not interested in deep updates\n    // in props; we assume that if deep objects are changed,\n    // this is in observables, which would have been tracked anyway\n    let memoComponent\n    if (realOptions.forwardRef) {\n        // we have to use forwardRef here because:\n        // 1. it cannot go before memo, only after it\n        // 2. forwardRef converts the function into an actual component, so we can't let the baseComponent do it\n        //    since it wouldn't be a callable function anymore\n        memoComponent = memo(forwardRef(wrappedComponent))\n    } else {\n        memoComponent = memo(wrappedComponent)\n    }\n\n    copyStaticProperties(baseComponent, memoComponent)\n    memoComponent.displayName = baseComponentName\n\n    return memoComponent\n}\n\n// based on https://github.com/mridgway/hoist-non-react-statics/blob/master/src/index.js\nconst hoistBlackList: any = {\n    $$typeof: true,\n    render: true,\n    compare: true,\n    type: true\n}\n\nfunction copyStaticProperties(base: any, target: any) {\n    Object.keys(base).forEach(key => {\n        if (!hoistBlackList[key]) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(base, key)!)\n        }\n    })\n}\n","import { useObserver } from \"./useObserver\"\n\ninterface IObserverProps {\n    children?(): React.ReactElement<any>\n    render?(): React.ReactElement<any>\n}\n\nfunction ObserverComponent({ children, render }: IObserverProps) {\n    const component = children || render\n    if (typeof component !== \"function\") {\n        return null\n    }\n    return useObserver(component)\n}\nObserverComponent.propTypes = {\n    children: ObserverPropsCheck,\n    render: ObserverPropsCheck\n}\nObserverComponent.displayName = \"Observer\"\n\nexport { ObserverComponent as Observer }\n\nfunction ObserverPropsCheck(\n    props: { [k: string]: any },\n    key: string,\n    componentName: string,\n    location: any,\n    propFullName: string\n) {\n    const extraKey = key === \"children\" ? \"render\" : \"children\"\n    const hasProp = typeof props[key] === \"function\"\n    const hasExtraProp = typeof props[extraKey] === \"function\"\n    if (hasProp && hasExtraProp) {\n        return new Error(\n            \"MobX Observer: Do not use children and render in the same time in`\" + componentName\n        )\n    }\n\n    if (hasProp || hasExtraProp) {\n        return null\n    }\n    return new Error(\n        \"Invalid prop `\" +\n            propFullName +\n            \"` of type `\" +\n            typeof props[key] +\n            \"` supplied to\" +\n            \" `\" +\n            componentName +\n            \"`, expected `function`.\"\n    )\n}\n"],"sourceRoot":""}