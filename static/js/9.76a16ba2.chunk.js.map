{"version":3,"sources":["components/LoginPage/LoginPage.module.css","utils/removeSpaces.ts","components/LoginPage/LoginPage.tsx","hooks/useAuthorization.ts"],"names":["module","exports","removeSpaces","str","replace","trim","LoginPage","useState","login","password","inputData","setInputData","showAlert","setShowAlert","history","useHistory","Form","useForm","form","isLogin","authorizationData","every","item","i","length","useAuthorization","handleChange","e","name","value","tailLayout","wrapperCol","offset","className","styles","wrap","title","labelCol","span","onFinishFailed","err","Item","label","rules","required","message","onChange","event","target","Password","classnames","notError","isError","description","type","showIcon","htmlType","onClick","auth","localStorage","setItem","toString","push","window","location","reload","resetFields"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,KAAO,wBAAwB,MAAQ,yBAAyB,SAAW,4BAA4B,QAAU,6B,wSCDtHC,EAAe,SAACC,GAAD,OAAiBA,EAAIC,QAAQ,OAAQ,IAAIC,QC6GtDC,UArGO,WAAO,IAAD,IACQC,mBAAS,CACzCC,MAAO,GACPC,SAAU,KAHc,mBACnBC,EADmB,KACRC,EADQ,OAKQJ,oBAAS,GALjB,mBAKnBK,EALmB,KAKRC,EALQ,KAMpBC,EAAUC,cANU,EAOXC,IAAKC,UAAbC,EAPmB,oBAQpBC,ECTwB,SAACT,GAAoC,IAC3DF,EAAoBE,EAApBF,MAAOC,EAAaC,EAAbD,SAEf,GAAIW,EAAkBC,OAAM,SAAAC,GAAI,OAAIA,EAAKd,QAAUA,KACjD,OAAO,EAGT,IAAK,IAAIe,EAAI,EAAGA,EAAIH,EAAkBI,OAAQD,IAC5C,GAAIH,EAAkBG,GAAGf,QAAUA,EACjC,OAAOC,IAAaW,EAAkBG,GAAGd,SAI7C,OAAO,EDJSgB,CAAiBf,GAE3BgB,EAAyB,SAACC,GAAD,OAAuC,SAACC,GACrEf,GAAa,GACbF,EAAa,2BAAKD,GAAN,kBAAkBkB,EAAO1B,EAAayB,EAAEE,YAmBhDC,EAAa,CACjBC,WAAY,CAAEC,OAAQ,IAGxB,OACE,yBAAKC,UAAWC,IAAOC,MACrB,wBAAIF,UAAWC,IAAOE,OAAtB,sEACA,kBAAC,IAAD,iBAZW,CACbC,SAAU,CAAEC,KAAM,EAAGN,OAAQ,GAC7BD,WAAY,CAAEO,KAAM,GAAIN,OAAQ,IAU9B,CAAkBd,KAAMA,EAAMqB,eAdX,SAACC,OAelB,kBAAC,IAAKC,KAAN,CACEC,MAAM,iCACNd,KAAK,QACLe,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,kLAIb,kBAAC,IAAD,CACEjB,KAAK,QACLkB,SAAU,SAAAC,GAAK,OAAIrB,EAAaqB,EAAMC,OAAnBtB,CAA2BqB,EAAMC,OAAOpB,OAC3DC,MAAO3B,EAAaQ,EAAUF,UAGlC,kBAAC,IAAKiC,KAAN,CACEC,MAAM,uCACNd,KAAK,WACLe,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,wLAIb,kBAAC,IAAMI,SAAP,CACErB,KAAK,WACLkB,SAAU,SAAAC,GAAK,OAAIrB,EAAaqB,EAAMC,OAAnBtB,CAA2BqB,EAAMC,OAAOpB,OAC3DC,MAAO3B,EAAaQ,EAAUD,aAGlC,yBACEwB,UAAWiB,KAAU,mBAClBhB,IAAOiB,UAAW,GADA,cAElBjB,IAAOkB,QAAUxC,GAFC,KAKrB,kBAAC,IAAD,CACEiC,QAAQ,yFACRQ,YAAY,0IACZC,KAAK,QACLC,UAAQ,KAGZ,kBAAC,IAAKd,KAASX,EACb,kBAAC,IAAD,CACEwB,KAAK,UACLE,SAAS,SACTC,QAAS,WAzEG,IAACC,KA0EGvC,KAxEtBwC,aAAaC,QAAQ,OAAQF,EAAKG,YAClC/C,EAAQgD,KAAK,KACbC,OAAOC,SAASC,SAChB/C,EAAKgD,eAsEarD,GAAVM,KALJ","file":"static/js/9.76a16ba2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"LoginPage_wrap__1rfSN\",\"title\":\"LoginPage_title__1koUF\",\"notError\":\"LoginPage_notError__1gGD7\",\"isError\":\"LoginPage_isError__xSU1S\"};","export const removeSpaces = (str: string) => str.replace(/\\s+/g, '').trim();\r\n","import React, { FC, useState } from 'react';\r\nimport { Form, Input, Button, Alert } from 'antd';\r\nimport styles from './LoginPage.module.css';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useAuthorization } from '../../hooks/useAuthorization';\r\nimport classnames from 'classnames';\r\nimport { removeSpaces } from '../../utils/removeSpaces';\r\n\r\nconst LoginPage: FC = () => {\r\n  const [inputData, setInputData] = useState({\r\n    login: '',\r\n    password: '',\r\n  });\r\n  const [showAlert, setShowAlert] = useState(false);\r\n  const history = useHistory();\r\n  const [form] = Form.useForm();\r\n  const isLogin = useAuthorization(inputData);\r\n\r\n  const handleChange: Function = (e: EventTarget & HTMLInputElement) => (name: string) => {\r\n    setShowAlert(false);\r\n    setInputData({ ...inputData, [name]: removeSpaces(e.value) });\r\n  };\r\n\r\n  const authorization = (auth: boolean) => {\r\n    if (auth) {\r\n      localStorage.setItem('auth', auth.toString());\r\n      history.push('/');\r\n      window.location.reload();\r\n      form.resetFields();\r\n    }\r\n  };\r\n\r\n  const onFinishFailed = (err: object) => {};\r\n\r\n  const layout = {\r\n    labelCol: { span: 4, offset: 0 },\r\n    wrapperCol: { span: 16, offset: 1 },\r\n  };\r\n\r\n  const tailLayout = {\r\n    wrapperCol: { offset: 5 },\r\n  };\r\n\r\n  return (\r\n    <div className={styles.wrap}>\r\n      <h3 className={styles.title}>Авторизация</h3>\r\n      <Form {...layout} form={form} onFinishFailed={onFinishFailed}>\r\n        <Form.Item\r\n          label=\"Логин\"\r\n          name=\"login\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: 'Пожалуйста, заполните поле Логин',\r\n            },\r\n          ]}\r\n        >\r\n          <Input\r\n            name=\"login\"\r\n            onChange={event => handleChange(event.target)(event.target.name)}\r\n            value={removeSpaces(inputData.login)}\r\n          />\r\n        </Form.Item>\r\n        <Form.Item\r\n          label=\"Пароль\"\r\n          name=\"password\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: 'Пожалуйста, заполните поле Пароль',\r\n            },\r\n          ]}\r\n        >\r\n          <Input.Password\r\n            name=\"password\"\r\n            onChange={event => handleChange(event.target)(event.target.name)}\r\n            value={removeSpaces(inputData.password)}\r\n          />\r\n        </Form.Item>\r\n        <div\r\n          className={classnames({\r\n            [styles.notError]: true,\r\n            [styles.isError]: showAlert,\r\n          })}\r\n        >\r\n          <Alert\r\n            message=\"Не удаётся войти\"\r\n            description=\"Неверный логин или пароль\"\r\n            type=\"error\"\r\n            showIcon\r\n          />\r\n        </div>\r\n        <Form.Item {...tailLayout}>\r\n          <Button\r\n            type=\"primary\"\r\n            htmlType=\"submit\"\r\n            onClick={() => {\r\n              authorization(isLogin);\r\n              isLogin ? setShowAlert(false) : setShowAlert(true);\r\n            }}\r\n          >\r\n            Войти\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginPage;\r\n","import authorizationData from '../mocks/authorizationData.json';\r\n\r\ninterface IInputData {\r\n  login: string;\r\n  password: string;\r\n}\r\n\r\nexport const useAuthorization = (inputData: IInputData): boolean => {\r\n  const { login, password } = inputData;\r\n\r\n  if (authorizationData.every(item => item.login !== login)) {\r\n    return false;\r\n  }\r\n\r\n  for (let i = 0; i < authorizationData.length; i++) {\r\n    if (authorizationData[i].login === login) {\r\n      return password === authorizationData[i].password;\r\n    }\r\n  }\r\n\r\n  return false;\r\n};\r\n"],"sourceRoot":""}