{"version":3,"sources":["components/LogoutButton/LogoutButton.tsx","utils/logout.ts","components/MenuList/MenuList.tsx","routes/MainRoute.tsx","routes/PrivateRoute.tsx","components/App/App.tsx","index.tsx","utils/getLocalStorage.ts","store/UsersStore.ts","store/index.ts","hooks/useStore.ts"],"names":["LogoutButton","history","useHistory","mode","theme","onClick","localStorage","clear","push","window","location","reload","logout","Item","icon","MenuList","useState","collapsed","setCollapsed","Sider","Layout","collapsible","onCollapse","prevCollapsed","defaultSelectedKeys","menuList","map","item","key","page","PieChartOutlined","to","path","MainPage","React","lazy","UserList","UserPage","EditUser","AddUser","MainRoute","Content","fallback","style","minHeight","padding","exact","component","PrivateRoute","Component","rest","render","props","Boolean","getItem","LoginPage","App","usersStore","useStore","useEffect","autorun","userState","configure","enforceActions","ReactDOM","document","getElementById","getLocalStorage","JSON","parse","UsersStore","fullUserList","filter","inputName","users","stringify","this","userList","matchesFilter","RegExp","filteredUserList","slice","test","observable","action","a","fetch","request","json","response","saveLocal","userItem","inputValue","filteredUsers","sortedArray","userId","newUserList","id","userInfo","newItem","StoreContext","createContext","useContext"],"mappings":"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","file":"static/js/main.0ce9d72f.chunk.js","sourcesContent":["import React, { FC } from 'react';\r\nimport { Menu } from 'antd';\r\nimport LogoutOutlined from '@ant-design/icons/LogoutOutlined';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { logout } from '../../utils/logout';\r\n\r\nconst LogoutButton: FC = () => {\r\n  const history = useHistory();\r\n\r\n  return (\r\n    <Menu mode=\"inline\" theme=\"dark\" onClick={() => logout(history)}>\r\n      <Menu.Item icon={<LogoutOutlined />}>Выход</Menu.Item>\r\n    </Menu>\r\n  );\r\n};\r\n\r\nexport default LogoutButton;\r\n","interface IHistory {\r\n  push: (path: string, state?: object) => void;\r\n}\r\n\r\nexport const logout = (history: IHistory): void => {\r\n  localStorage.clear();\r\n  history.push('/');\r\n  window.location.reload();\r\n};\r\n","import React, {FC, useState} from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { Layout, Menu } from 'antd';\r\nimport {PieChartOutlined} from '@ant-design/icons';\r\nimport menuList from './menuList.json';\r\nimport LogoutButton from '../LogoutButton/LogoutButton';\r\n\r\nconst MenuList: FC = () => {\r\n  const [collapsed, setCollapsed] = useState<boolean>(false);\r\n  const onCollapse = () => {\r\n    setCollapsed(prevCollapsed => !prevCollapsed);\r\n  };\r\n  const { Sider } = Layout;\r\n\r\n  return (\r\n    <Sider collapsible collapsed={collapsed} onCollapse={onCollapse}>\r\n      <Menu theme=\"dark\" defaultSelectedKeys={['1']} mode=\"inline\">\r\n        {menuList.map(item => (\r\n          <Menu.Item key={item.page} icon={<PieChartOutlined />}>\r\n            <NavLink to={item.path}>{item.page}</NavLink>\r\n          </Menu.Item>\r\n        ))}\r\n      </Menu>\r\n      <LogoutButton/>\r\n    </Sider>\r\n  );\r\n};\r\n\r\nexport default MenuList;\r\n","import React, {Suspense} from 'react';\r\nimport {Route, Switch} from 'react-router-dom';\r\nimport MenuList from '../components/MenuList/MenuList';\r\nimport {Layout} from 'antd';\r\n\r\nconst MainPage = React.lazy(() => import('../components/MainPage/MainPage'));\r\nconst UserList = React.lazy(() => import('../components/UserList/UserList'));\r\nconst UserPage = React.lazy(() => import('../components/UserPage/UserPage'));\r\nconst EditUser = React.lazy(() => import('../components/EditUser/EditUser'));\r\nconst AddUser = React.lazy(() => import('../components/AddUser/AddUser'));\r\n\r\nexport const MainRoute = () => {\r\n  const {Content} = Layout;\r\n\r\n  return (\r\n    <Suspense fallback={<div>Загрузка...</div>}>\r\n      <Switch>\r\n        <Layout style={{minHeight: '100vh'}}>\r\n          <MenuList/>\r\n          <Layout>\r\n            <Content style={{padding: 20}}>\r\n              <Route exact path='/' component={MainPage}/>\r\n              <Route exact path='/user_list' component={UserList}/>\r\n              <Route exact path='/user/:userid' component={UserPage}/>\r\n              <Route exact path='/user/:userid/edit' component={EditUser}/>\r\n              <Route exact path='/add_user' component={AddUser}/>\r\n            </Content>\r\n          </Layout>\r\n        </Layout>\r\n      </Switch>\r\n    </Suspense>\r\n  )\r\n};\r\n","import React, {FC} from 'react';\r\nimport {Route, Redirect} from 'react-router-dom';\r\n\r\n// @ts-ignore\r\nconst PrivateRoute: FC = ({component: Component, ...rest}) => {\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={props =>\r\n        Boolean(localStorage.getItem('auth')) ? (\r\n          <Component {...props}/>\r\n        ) : (\r\n          <Redirect to='/login'/>\r\n        )\r\n      }\r\n    />\r\n  )\r\n};\r\n\r\nexport default PrivateRoute;\r\n","import React, {FC, useEffect} from 'react';\nimport {MainRoute} from '../../routes/MainRoute';\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\nimport PrivateRoute from '../../routes/PrivateRoute';\nimport {autorun} from 'mobx';\nimport {useStore} from '../../hooks/useStore';\n\nconst LoginPage = React.lazy(() => import('../../components/LoginPage/LoginPage'));\n\nconst App: FC = () => {\n  const {usersStore} = useStore();\n\n  useEffect(() => {\n    autorun(() => {\n      usersStore.userState();\n    })\n  });\n\n  return(\n    <BrowserRouter>\n      <Switch>\n        {/*@ts-ignore*/}\n        <PrivateRoute exact={true} path='/' component={MainRoute} />\n        <Route exact path='/login' component={LoginPage}/>\n        <MainRoute/>\n      </Switch>\n\n    </BrowserRouter>\n  )\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport { BrowserRouter } from 'react-router-dom';\nimport 'antd/dist/antd.css';\nimport { configure } from 'mobx';\n\nconfigure({ enforceActions: 'always' });\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n","import {UserType} from '../store/UsersStore';\r\n\r\nexport const getLocalStorage = (key: string): UserType[] => {\r\n\r\n  let lst;\r\n\r\n  if (typeof localStorage === 'undefined') {\r\n    lst = { [key]: {} }\r\n  } else if (typeof localStorage[key] !== 'undefined') {\r\n    lst = JSON.parse(localStorage[key])\r\n  } else {\r\n    lst = { [key]: {} }\r\n  }\r\n\r\n  return lst\r\n};\r\n","import {observable, action} from 'mobx';\r\nimport {getLocalStorage} from '../utils/getLocalStorage';\r\n\r\nexport type UserType = {\r\n  address: {\r\n    street: string;\r\n    suite: string;\r\n    city: string;\r\n    zipcode: string;\r\n    geo: {\r\n      lat: string;\r\n      lng: string;\r\n    };\r\n  };\r\n  company: {\r\n    name: string;\r\n    catchPhrase: string;\r\n    bs: string;\r\n  };\r\n  avatar: string;\r\n  email: string;\r\n  id: number;\r\n  name: string;\r\n  phone: string;\r\n  username: string;\r\n  website: string;\r\n};\r\n\r\nexport type UsersStoreType = {\r\n  fullUserList: UserType[];\r\n  userList: UserType[];\r\n  userState: () => Promise<UserType[]>;\r\n  updateFilter: (inputValue: string, placeholder: string) => void;\r\n  filteredUsers: () => UserType[];\r\n  sortUsers: (sortedArray: UserType[]) => void;\r\n  addUserItem: (userItem: UserType) => void;\r\n  editUser: (userInfo: UserType) => void;\r\n  deleteUser: (userId: number) => void;\r\n}\r\n\r\nexport class UsersStore implements UsersStoreType {\r\n\r\n  fullUserList: UserType[] = []\r\n  @observable\r\n  userList: UserType[] = this.fullUserList;\r\n  filter: string = '';\r\n  inputName: string = '';\r\n\r\n  @action\r\n  userState = async () => {\r\n    if (typeof localStorage.users === 'undefined') {\r\n      const request = await fetch('https://my-json-server.typicode.com/KsuBurn/myJsonServer/users');\r\n      const response = await request.json();\r\n      this.fullUserList = response;\r\n      await action(() => this.userList = response)();\r\n      this.saveLocal();\r\n\r\n      return this.userList;\r\n    } else {\r\n      this.fullUserList = getLocalStorage('users');\r\n      await action(() => this.userList = getLocalStorage('users'))();\r\n\r\n      return this.userList;\r\n    }\r\n  };\r\n\r\n\r\n  saveLocal() {\r\n    const lst = typeof localStorage === 'undefined' ? { users: {} } : localStorage;\r\n\r\n    lst.users = JSON.stringify(this.userList);\r\n  }\r\n\r\n  @action\r\n  addUserItem = (userItem: UserType): void => {\r\n    this.userList.push({ ...userItem });\r\n    this.fullUserList.push({ ...userItem });\r\n    this.saveLocal();\r\n  };\r\n\r\n  @action\r\n  filteredUsers(): UserType[] {\r\n    const matchesFilter = new RegExp(this.filter, 'i');\r\n\r\n    const filteredUserList = this.fullUserList.slice().filter((item): boolean => {\r\n      if(this.filter) {\r\n        // @ts-ignore\r\n        return matchesFilter.test(item[this.inputName]);\r\n      }\r\n      return true;\r\n    });\r\n    this.userList = filteredUserList;\r\n    return this.userList\r\n  };\r\n\r\n  @action\r\n  updateFilter =  (inputValue: string, inputName: string) => {\r\n    this.filter = inputValue;\r\n    this.inputName = inputName;\r\n    this.filteredUsers();\r\n  };\r\n\r\n  @action\r\n  sortUsers =  (sortedArray: UserType[]) => {\r\n\r\n    this.userList = sortedArray;\r\n  };\r\n\r\n  @action\r\n  deleteUser = (userId: number) => {\r\n\r\n    const newUserList = this.userList.filter((item) => item.id !== userId);\r\n\r\n    action(() => this.userList = newUserList)();\r\n    this.saveLocal();\r\n  };\r\n\r\n  @action\r\n  editUser = (userInfo: UserType): void => {\r\n    const newUserList: UserType[] = this.userList.map((item: UserType) => {\r\n      let newItem = {...item};\r\n\r\n      if (userInfo.id === item.id) {\r\n       newItem = {...userInfo};\r\n      }\r\n\r\n      return newItem;\r\n    });\r\n\r\n    action(() => this.userList = newUserList)()\r\n    this.saveLocal();\r\n  };\r\n};\r\n","import { createContext } from 'react';\r\nimport {UsersStore} from './UsersStore';\r\nimport {UsersStoreType} from './UsersStore';\r\n\r\nexport type StoresType = {\r\n  usersStore: UsersStoreType;\r\n};\r\n\r\nexport const StoreContext = createContext<StoresType>({\r\n  usersStore: new UsersStore(),\r\n});\r\n","import React from 'react';\r\nimport { StoreContext } from '../store';\r\n\r\nexport const useStore = () => React.useContext(StoreContext);\r\n"],"sourceRoot":""}